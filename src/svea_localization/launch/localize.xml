<!--
    Launch default odometry and localization
-->

<launch>
    <!-- Launch file arguments -->

    <!-- Main argument -->
    <arg name="is_sim"                  default="false"/>
    <arg name="is_indoors"              default="true" />
    <arg name="initial_pose_x"          default="0.0" />
    <arg name="initial_pose_y"          default="0.0" />
    <arg name="initial_pose_a"          default="0.0" />

    <!-- low-level interface (serial) -->
    <arg name="start_serial"            default="false" /> 
    <!-- Should be set to true, if only the localization is running 
    (i.e. this is needed in order to have wheel encoders and actuation_to_twist working) -->
    <arg name="lli_port"                default="/dev/ttyACM0"/>

    <!-- map server -->
    <arg name="map_file"                default=""/>

    <!-- Lidar  -->
    <arg name="lidar_ip"                default="" />

    <!-- GPS -->
    <!-- <arg name="start_rtk"               default="false"/>
    <arg name="gps_device"              default="/dev/ttyACM0" />
    <arg name="delay"                   default="2.0"/>
    <arg name="gps_baud"                default="250000" />  -->
     <!-- 38400 for UART connection -->
    <!-- yaw offest = initial_pose_a -->

    <!-- Datum args, if use_datum is true, the datum will be set
    <arg name="use_datum"               default="false" />
    <arg name="datum_service"           default="/datum" />
    <arg name="datum_file"              default="" />
    <arg name="datum_data"              default="[]" /> -->

    <!-- Nodes -->

    <!-- TODO: Start low-level interface -->
    <!-- <group if="$(arg start_serial)">
        <node pkg="rosserial_python" exec="serial_node.py" name="serial_node">
            <param name="port" value="$(arg lli_port)"/>
            <param name="baud" value="250000"/>
        </node>
    </group> -->

    <!-- Start map server -->
    <node if="$(eval 'map_file != \'\'')" pkg="nav2_map_server" exec="map_server" name="map_server" output="screen" args="$(arg map_file)"/>

    <!-- start all sensors if this is not a simulation -->
    <group unless="$(var is_sim)">
        <!-- TODO: <param name="use_sim_time" value="false"/> -->
        <group if="$(var is_indoors)">
            <!-- Start Lidar -->
            <include file="$(find-pkg-share svea_localization)/launch/sensors/lidar.xml">
                <arg name="lidar_ip"                    value="$(var lidar_ip)" if="$(eval 'lidar_ip != \'\'')"/>
            </include>

            <!-- Start AMCL -->
            <node pkg="nav2_amcl" exec="nav2_amcl" name="amcl_localization" output="screen">
                <rosparam command="load"        file="$(find-pkg-share svea_localization)/params/amcl/localize.yaml"/>
                <param name="scan"              value="scan"/>
                <param name="initial_pose_x"    value="$(var initial_pose_x)" />
                <param name="initial_pose_y"    value="$(var initial_pose_y)" />
                <param name="initial_pose_a"    value="$(var initial_pose_a)" />
            </node>
        </group>

        <!-- TODO: Start GPS if outdoor localization -->
        <!-- <group unless="$(arg is_indoors)">
            <group if="$(arg start_rtk)">
                <include file="$(find-pkg-share svea_localization)/launch/sensors/rtk.launch">
                    <arg name="gps_device"      value="$(var gps_device)" />
                    <arg name="baud"            value="$(var gps_baud)" />
                </include>
            </group>
            <include file="$(find-pkg-share svea_localization)/launch/sensors/navsat.launch">
                <arg name="delay"           value="$(var delay)"/>
                <arg name="yaw_offset"      value="$(var initial_pose_a)"/>
                <arg name="use_datum"       value="$(var use_datum)" />
                <arg name="datum_service"   value="$(var datum_service)" />
                <arg name="datum_file"      value="$(var datum_file)" />
                <arg name="datum_data"      value="$(var datum_data)" />
            </include>
        </group> -->

        <!-- Start controller -->
        <include file="$(find-pkg-share svea_localization)/launch/sensors/controller.xml"></include>

        <!-- Static transforms for sensors -->
        <include file="$(find-pkg-share svea_localization)/launch/transforms.xml">
            <arg name="is_indoors"  value="$(var is_indoors)"/>
        </include>
    </group>

    <!-- Do not start the sensors, useful when running from a bag file -->
    <group if="$(arg is_sim)">
        <param name="use_sim_time"          value="true" />
    </group>

    <!-- Robot localization (Local EKF)-->
    <node pkg="robot_localization" exec="ekf_localization_node" name="ekf_local" clear_params="true" output="screen">
        <rosparam command="load" file="$(find-pkg-share svea_localization)/params/robot_localization/local_ekf.yaml" />
        <param name="imu0"                  value="imu/data"/>
        <param name="twist0"                value="actuation_twist"/>
        <remap from="/odometry/filtered"    to="/odometry/filtered/local"/>
        <!-- TODO: <remap from="/set_pose"             to="/global/set_pose"/> -->
    </node>

    <!-- Global EKF -->
    <node unless="$(var is_indoors)" pkg="robot_localization" exec="ekf_localization_node" name="ekf_global" clear_params="true" output="screen">
        <rosparam command="load" file="$(find-pkg-share svea_localization)/params/robot_localization/global_ekf.yaml"/>
        <!-- initial_state: [x,          y,          z, 
                             roll,       pitch,      yaw, 
                             x_dot,      y_dot,      z_dot, 
                             roll_dot,   pitch_dot,  yaw_dot, 
                             x_dot_dot,  y_dot_dot,  z_dot_dot]-->
        <rosparam subst_value="true">
        initial_state: [$(var initial_pose_x),  $(var initial_pose_y),  0.0, 
                        0.0,                    0.0,                    $(arg initial_pose_a), 
                        0.0,                    0.0,                    0.0, 
                        0.0,                    0.0,                    0.0, 
                        0.0,                    0.0,                    0.0]
        </rosparam>
        <param name="odom0"                 value="odometry/gps"/>
        <param name="imu0"                  value="imu/data"/>
        <param name="twist0"                value="actuation_twist"/>
        <remap from="/odometry/filtered"    to="/odometry/filtered/global"/>
        <!-- TODO: <remap from="/set_pose"             to="/global/set_pose"/> -->
    </node>
</launch>
