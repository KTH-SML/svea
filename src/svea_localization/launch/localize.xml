<?xml version="1.0"?>

<!--
    Launch default odometry and localization
-->

<launch>
    <!-- Launch file arguments -->
    <arg name="is_sim"                  default="false"/>
    <let name="is_sim" value="$(eval '\'$(var is_sim)\' == \'true\'')"/>
    <arg name="is_indoors"              default="true" />
    <let name="is_indoors" value="$(eval '\'$(var is_indoors)\' == \'true\'')"/>
    <arg name="initial_pose_x"          default="0.0" />
    <arg name="initial_pose_y"          default="0.0" />
    <arg name="initial_pose_a"          default="0.0" />

    <!-- low-level interface (serial) -->
    <arg name="start_serial"            default="false" /> 
    <let name="start_serial_bool" value="$(eval '\'$(var start_serial)\' == \'true\'')"/>
    <!-- Should be set to true, if only the localization is running 
    (i.e. this is needed in order to have wheel encoders and actuation_to_twist working) -->
    <arg name="lli_port"                default="/dev/ttyACM0"/>

    <!-- map server -->
    <arg name="map_file"                default=""/>

    <!-- Lidar  -->
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    <arg name="lidar_ip"                default="192.168.0.10" />
=======
    <arg name="lidar_ip"                default="192.168.3.11" />
>>>>>>> ecc9d3f (Migration to ROS 2 (#55))
=======
    <arg name="lidar_ip"                default="" />
>>>>>>> a6d4456 (add svea_localization,modifying to ros2 in progress)
=======
    <arg name="lidar_ip"                default="192.168.3.11" />
    <let name="lidar_ip_bool" value="$(eval '\'$(var lidar_ip)\' != \'\'')"/>
>>>>>>> b921c25 (Added rmw-zenoh in dockerfile, added svea_example)

    <!-- GPS -->
    <arg name="start_rtk"               default="false"/>
    <let name="start_rtk" value="$(eval '\'$(var start_rtk)\' == \'true\'')"/>
    <arg name="gps_device"              default="/dev/ttyACM0" />
    <arg name="delay"                   default="2.0"/>
    <arg name="gps_baud"                default="250000" /> 
    <!-- 38400 for UART connection -->
    <!-- yaw offest = initial_pose_a -->

    <!-- Datum args, if use_datum is true, the datum will be set -->
    <arg name="use_datum"               default="false" />
    <let name="use_datum" value="$(eval '\'$(var use_datum)\' == \'true\'')"/>
    <arg name="datum_service"           default="/datum" />
    <arg name="datum_file"              default="" />
    <arg name="datum_data"              default="[]" />

    <!-- odom to map node -->
    <arg name="map_frame"               default="map"/>
    <arg name="wait_for_transform"      default="false"/>
    <let name="wait_for_transform" value="$(eval '\'$(var wait_for_transform)\' == \'true\'')"/>
    <arg name="publish_odometry"        default="true"/>
    <let name="publish_odometry" value="$(eval '\'$(var publish_odometry)\' == \'true\'')"/>
    <arg name="publish_pose"            default="true"/>
    <let name="publish_pose" value="$(eval '\'$(var publish_pose)\' == \'true\'')"/>

    <!-- ekf tf -->
    <arg name="publish_tf"              default="true"/>
    <let name="publish_tf" value="$(eval '\'$(var publish_tf)\' == \'true\'')"/>

    <!-- Nodes -->

    <!-- TODO: Start low-level interface -->
    <!-- <group if="$(arg start_serial)">
        <node pkg="rosserial_python" exec="serial_node.py" name="serial_node">
            <param name="port" value="$(arg lli_port)"/>
            <param name="baud" value="250000"/>
        </node>
    </group> -->

    <!-- Start map server -->
    <node if="$(eval '\'$(var map_file)\' != \'\'')" pkg="nav2_map_server" exec="map_server" name="map_server" output="screen" args="$(var map_file)"/>

<<<<<<< HEAD
        <!-- start all sensors if this is not a simulation -->
<<<<<<< HEAD
    <group unless="$(var is_sim)">
        <let name="use_sim_time" value="false"/>
        <!-- <let name="use_sim_time" value="$(eval '\'$(var use_sim_time)\' == \'true\'')"/> -->
        <group if="$(var is_indoors)">
=======
    <group unless="$(eval '\'$(var is_sim)\' == \'true\'')">
        <let name="use_sim_time" value="false"/>
        <!-- <let name="use_sim_time" value="$(eval '\'$(var use_sim_time)\' == \'true\'')"/> -->
        <group if="$(eval '\'$(var is_indoors)\' == \'true\'')">
>>>>>>> ecc9d3f (Migration to ROS 2 (#55))
=======
    <!-- start all sensors if this is not a simulation -->
    <group unless="$(var is_sim)">
<<<<<<< HEAD
        <!-- TODO: <param name="use_sim_time" value="false"/> -->
<<<<<<< HEAD
        <group if="$(arg is_indoors)">
>>>>>>> a6d4456 (add svea_localization,modifying to ros2 in progress)
=======
=======
        <let name="use_sim_time" value="false"/>
        <let name="use_sim_time" value="$(eval '\'$(var use_sim_time)\' == \'true\'')"/>
>>>>>>> b921c25 (Added rmw-zenoh in dockerfile, added svea_example)
        <group if="$(var is_indoors)">
>>>>>>> 7b91b85 (2025/03/24 Meeting update)
            <!-- Start Lidar -->
            <include file="$(find-pkg-share svea_localization)/launch/lidar.xml">
                <arg name="lidar_ip"                    value="$(var lidar_ip)"/>
            </include>

<<<<<<< HEAD
<<<<<<< HEAD
	    <include file="$(find-pkg-share svea_localization)/launch/localization.py">
		    <arg name="intial_pose_x" value="$(var initial_pose_x)"/>
		    <arg name="intial_pose_y" value="$(var initial_pose_y)"/>
		    <arg name="intial_pose_a" value="$(var initial_pose_a)"/>
	    </include>

=======
>>>>>>> ecc9d3f (Migration to ROS 2 (#55))
            <!-- Lifecycle Manager for Map Server -->
            <!-- <node pkg="nav2_lifecycle_manager" exec="lifecycle_manager" name="lifecycle_manager_loc" output="screen">
                <param name="autostart" value="true"/>
                <param name="node_names" value="['map_server']"/>
            </node> -->

            <!-- Start AMCL -->
<<<<<<< HEAD
            <node pkg="nav2_amcl" exec="amcl" name="amcl_localization" output="screen">
=======
            <!-- <node pkg="nav2_amcl" exec="amcl" name="amcl_localization" output="screen">
>>>>>>> ecc9d3f (Migration to ROS 2 (#55))
                <param from="$(find-pkg-share svea_localization)/params/localize.yaml"/>
                <param name="scan"              value="/scan"/>
                <param name="initial_pose_x"    value="$(var initial_pose_x)" />
                <param name="initial_pose_y"    value="$(var initial_pose_y)" />
                <param name="initial_pose_a"    value="$(var initial_pose_a)" />
<<<<<<< HEAD
            </node>
=======
            </node> -->
>>>>>>> ecc9d3f (Migration to ROS 2 (#55))

            <!-- Lifecycle Manager for AMCL -->
           <!-- <node pkg="nav2_lifecycle_manager" exec="lifecycle_manager" name="lifecycle_manager_loc" output="screen">
                <param name="autostart" value="true"/>
                <param name="node_names" value="['amcl_localization']"/>
            </node> -->
=======
            <!-- Start AMCL -->
            <node pkg="nav2_amcl" exec="amcl" name="amcl_localization" output="screen">
                <param from="$(find-pkg-share svea_localization)/config/localize.yaml"/>
                <param name="scan"              value="scan"/>
                <param name="initial_pose_x"    value="$(var initial_pose_x)" />
                <param name="initial_pose_y"    value="$(var initial_pose_y)" />
                <param name="initial_pose_a"    value="$(var initial_pose_a)" />
            </node>
>>>>>>> a6d4456 (add svea_localization,modifying to ros2 in progress)
        </group>

        <!-- TODO: Start GPS if outdoor localization -->
        <group unless="$(var is_indoors)">
            <group if="$(var start_rtk)">
                <include file="$(find-pkg-share svea_localization)/launch/rtk.xml">
                    <arg name="gps_device"      value="$(var gps_device)" />
                    <arg name="baud"            value="$(var gps_baud)" />
                </include>
            </group>
            <include file="$(find-pkg-share svea_localization)/launch/navsat.xml">
                <arg name="delay"           value="$(var delay)"/>
                <arg name="yaw_offset"      value="$(var initial_pose_a)"/>
                <arg name="use_datum"       value="$(var use_datum)" />
                <arg name="datum_service"   value="$(var datum_service)" />
                <arg name="datum_file"      value="$(var datum_file)" />
                <arg name="datum_data"      value="$(var datum_data)" />
            </include>
        </group>

        <!-- Start controller -->
        <node pkg="svea_localization" exec="actuation_to_twist.py" name="actuation_to_twist" output="screen"/>

        <!-- Static transforms for sensors -->
        <include file="$(find-pkg-share svea_localization)/launch/transforms.xml">
            <arg name="is_indoors"  value="$(var is_indoors)"/>
        </include>
    </group>


    <!-- Do not start the sensors, useful when running from a bag file -->
    <let name="use_sim_time" value="$(var is_sim)" if="$(var is_sim)"/>

    <!-- Robot localization (Local EKF)-->
<<<<<<< HEAD
<<<<<<< HEAD
    <node pkg="robot_localization" exec="ekf_node" name="ekf_local" output="screen">
        <param from="$(find-pkg-share svea_localization)/params/local_ekf.yaml" />
<<<<<<< HEAD
        <param name="imu0"                  value="/imu/filtered"/>
        <param name="twist0"                value="/encoder/filtered"/>
=======
        <param name="imu0"                  value="/lli/sensor/imu"/>
        <param name="twist0"                value="/lli/sensor/encoders"/>
>>>>>>> ecc9d3f (Migration to ROS 2 (#55))
        <remap from="/odometry/filtered"    to="/odometry/local"/>
        <!-- TODO: <remap from="/set_pose"             to="/global/set_pose"/>  -->
=======
    <node pkg="robot_localization" exec="ekf_localization_node" name="ekf_local" clear_params="true" output="screen">
        <rosparam command="load" file="$(find-pkg-share svea_localization)/params/robot_localization/local_ekf.yaml" />
        <param name="imu0"                  value="imu/data"/>
        <param name="twist0"                value="actuation_twist"/>
        <remap from="/odometry/filtered"    to="/odometry/filtered/local"/>
        <!-- TODO: <remap from="/set_pose"             to="/global/set_pose"/> -->
>>>>>>> a6d4456 (add svea_localization,modifying to ros2 in progress)
=======
    <node pkg="robot_localization" exec="ekf_node" name="ekf_local" output="screen">
        <param from="$(find-pkg-share svea_localization)/config/local_ekf.yaml" />
        <param name="imu0"                  value="imu/data"/>
        <param name="twist0"                value="actuation_twist"/>
        <remap from="/odometry/filtered"    to="/odometry/filtered/local"/>
        <!-- TODO: <remap from="/set_pose"             to="/global/set_pose"/> --> 
>>>>>>> b921c25 (Added rmw-zenoh in dockerfile, added svea_example)
    </node>

    <!-- Global EKF -->
    <node unless="$(var is_indoors)" pkg="robot_localization" exec="ekf_node" name="ekf_global" output="screen">
        <param from="$(find-pkg-share svea_localization)/config/global_ekf.yaml"/>
        <!-- initial_state: [x,          y,          z, 
                             roll,       pitch,      yaw, 
                             x_dot,      y_dot,      z_dot, 
                             roll_dot,   pitch_dot,  yaw_dot, 
                             x_dot_dot,  y_dot_dot,  z_dot_dot]-->
        <param name="initial_state" value="[$(var initial_pose_x), $(var initial_pose_y), 0.0, 
                                     0.0, 0.0, $(var initial_pose_a),
                                     0.0, 0.0, 0.0,
                                     0.0, 0.0, 0.0,
                                     0.0, 0.0, 0.0]"/>
        <param name="odom0"                 value="odometry/gps"/>
        <param name="imu0"                  value="imu/data"/>
        <param name="twist0"                value="actuation_twist"/>
        <remap from="/odometry/filtered"    to="/odometry/filtered/global"/>
        <!-- TODO: <remap from="/set_pose"             to="/global/set_pose"/> -->
    </node>
</launch>
