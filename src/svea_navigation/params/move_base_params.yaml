# Parameters for TrajectoryPlannerROS (local planner and controller). 
# TrajectoryPlannerROS computes a dynamically feasible trajectory, usually in the robot's local coordinate frame (base_link), which includes linear and angular velocities that guide the robot along the global path while avoiding obstacles
TrajectoryPlannerROS:
  max_vel_x: 0.45
  min_vel_x: -0.2
  max_vel_theta: 1.0
  min_in_place_vel_theta: 0.4
  acc_lim_theta: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5
  holonomic_robot: false
  dwa: true                      # Boolean flag indicating whether to use the Dynamic Window Approach (Default: true).
  controller_frequency: 10       # Frequency at which the controller runs (default 10 hz). higher controller frequency allows for more frequent updates and corrections to the robot's trajectory
  sim_time: 1.0                  # how far ahead in time (in seconds) the planner should simulate the robot's motion to predict and plan trajectories (default 1s)
  vx_samples: 10                 # This means the planner will explore 20 (default) different linear velocity options when generating trajectories
  vtheta_samples: 40             # This means the planner will explore 40 (default) different angular velocity options when generating trajectories.
  escape_vel: -0.1               # Small negative value to allow backward escape

# Parameters for NavfnROS (global planner). It uses the Dijkstra's algorithm to compute the shortest path on a the global costmap.
NavfnROS:
  tolerance: 0.2                 # The tolerance in meters to allow the goal point to be within. (defalut 0.1m)
  planner_window_x: 5            # The width of the planner's search window in meters.
  planner_window_y: 10            # The height of the planner's search window in meters.
  default_tolerance: 0.2         # Allow some tolerance in reaching the goal
  allow_unknown: false           # Whether or not the planner will allow paths through unknown space in the costmap.
  use_dijkstra: true             # Whether to use Dijkstra's algorithm for planning. If set to false, the planner will use A* algorithm instead.
  #cost_factor: 3.0               # Scales the cost values from the costmap

# Parameters for Teb local planner.
# TEB focuses on real-time navigation using local data (local costmap).
TebLocalPlannerROS:

 map_frame:  map

 # Trajectory

 teb_autosize: true                    # Automatic resizing of the trajectory based on path length and speed. Longer paths and higher speeds may require more time steps to maintain smooth and safe navigation.
 dt_ref: 0.3
 dt_hysteresis: 0.1                    # A big value ensures that minor dynamic speed changes or path length variations do not cause frequent resizing
 global_plan_overwrite_orientation: true
 max_global_plan_lookahead_dist: 5.0   # The planner will consider up to N meters ahead in the global plan for trajectory optimization. This helps in planning for upcoming obstacles and turns.
 feasibility_check_no_poses: 2         # A feasibility check is performed after the optimizer returns a trajectory and before the velocity commands are sent to the robot. The purpose of this check is to identify an invalid/infeasible trajectory that might be produced by the optimizer (just remember: soft constraints, local minima, etc.).
 max_samples: 200
 
 # Robot
         
 max_vel_x: 0.35
 max_vel_x_backwards: 0.3
 max_vel_theta: 0.3       # = v_max/r_min
 acc_lim_x: 0.3
 acc_lim_theta: 0.3
 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   type: "line"
   radius: 0.2 # for type "circular"
   line_start: [-0.1, 0.0] # for type "line"
   line_end: [0.4, 0.0] # for type "line"
   front_offset: 0.16 # for type "two_circles"
   front_radius: 0.3 # for type "two_circles"
   rear_offset: 0    # for type "two_circles"
   rear_radius: 0.25 # for type "two_circles"
   vertices: [[-0.15, 0.14], [0.35, 0.14], [0.35, -0.14], [-0.15, -0.14]]    # ismir shell considered. for type "polygon". the pose [0,0] is located at the rear-axle (axis of rotation)

 # ********************** Carlike robot parameters ********************
 carlike_kinematics: true
 enable_odom_backwards: true
 min_turning_radius: 0.5          # Min turning radius of the carlike robot (using knowledge of wheelbase and max_steering_angle it has to be greater then 0.12m). It influences trajectory generation.
 wheelbase: 0.324                 # Wheelbase of our robot
 cmd_angle_instead_rotvel: true   # Instead of providing a rotational velocity (angular velocity), the planner provides a steering angle.
 enable_nh_heading: true          # Non-holonomic heading
 # ********************************************************************
 
 # GoalTolerance. We do not care too much about the final
    
 xy_goal_tolerance: 0.4        # Acceptable linear distance away from the final goal, in meters. 
 yaw_goal_tolerance: 0.4
 free_goal_vel: true           # Unrestricted velocity when nearing the goal position
 complete_global_plan: false   # false: The robot may consider the global plan complete when it reaches a position that is sufficiently close to the final goal

 # Obstacles
    
 min_obstacle_dist: 0.3                       # Minimum distance you want to maintain away from obstacles. Distances greater than this one lead to 0 cost. Using line footprint it has to include half of car width as well (0.14m).
 inflation_dist: 0.0
 include_dynamic_obstacles: true              # Specify whether the motion of dynamic obstacles should be included (constant-velocity-model) or not.
 include_costmap_obstacles: true              # Determines whether the obstacles from the costmap should be included in the planning process.
 costmap_obstacles_behind_robot_dist: 1.5       # Specifies the maximum distance behind the robot where obstacles from the costmap are considered during planning.
 dynamic_obstacle_inflation_dist: 0.0         # inflation already considered in the local costmap.
 obstacle_poses_affected: 20                  # How many of the closest obstacles (in terms of distance) are considered when computing the robotâ€™s trajectory and planning its path
 allow_unknown: false   
  # Costmap converter plugin   
 costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
  # costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSRANSAC"
  # costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSMCCH"
  # costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSConcaveHull"
 costmap_converter_spin_thread: true
 costmap_converter_rate: 8                                          

 # Optimization
    
 no_inner_iterations: 5                # Controls the number of optimization steps taken within each outer iteration.
 no_outer_iterations: 4                # Controls how many times the entire optimization process is repeated. 
 obstacle_cost_exponent: 2.5           # Controls the rate at which the cost increases as the robot gets closer to an obstacle
 optimization_activate: true
 optimization_verbose: false
 penalty_epsilon: 0.1
 weight_max_vel_x: 2                   # Higher weight reduces the translational speed of the robot, promoting smoother and safer movements.
 weight_max_vel_theta: 1               # Higher weight reduces the rotational speed, promoting smoother turns.
 weight_acc_lim_x: 1                   # Higher weight discourages rapid acceleration changes, promoting smoother acceleration profiles.
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1000            # Enforces the non-holonomic constraint strongly, ensuring the robot adheres to its kinematic constraints (e.g., a car-like robot that cannot move sideways).
 weight_kinematics_forward_drive: 1    # Encourages the robot to prefer forward motion over backward motion, which is generally more efficient and safer.
 weight_kinematics_turning_radius: 5   # Encourages the robot to make wider turns, reducing sharp turns that might be infeasible or unsafe.
 weight_optimaltime: 10                 # Balances the trajectory to minimize travel time while considering other constraints and weights. (must be >0)
 weight_shortest_path: 0
 weight_obstacle: 50                   # Significantly penalizes trajectories that get close to obstacles, promoting safer paths.
 weight_dynamic_obstacle: 0            # dynamic obstacles are the ones detected by the obstacle layer is the local costmap.
 weight_dynamic_obstacle_inflation: 0  # Optimization weight for inflation costs of dynamic obstacles.
 weight_viapoint: 0.1                    # Via points from global plan are intermediate points that the trajectory should pass through. The weight_viapoint parameter influences how strongly the planner tries to follow these via points. A higher weight means that the planner will prioritize hitting the via points more strictly, while a lower weight means it will be less strict about following these points.
 weight_adapt_factor: 2                # The planner reduces or increases the priority of obstacle avoidance according whether an open environment or a tight and crowded environment is detected, allowing the robot to move more efficiently.

 # Homotopy Class Planner. It allows for the consideration of multiple topologically distinct paths (homotopy classes) around obstacles. 

 enable_homotopy_class_planning: false  # for a sidewalk environment it proved to provide more troubles than benefits.
 enable_multithreading: true
 simple_exploration: false             # Uses a simpler and faster exploration method, potentially at the cost of finding fewer homotopy classes.
 max_number_classes: 3
 selection_cost_hysteresis: 100.0        # The parameter adds a small bias to the cost of the currently selected trajectory, making it less likely to switch to a new path unless the new path is significantly better.
 selection_prefer_initial_plan: 100   # It encourages the planner to follow the initial global plan by adding a cost preference for it. The planner multiplies the cost of deviating from the initial plan by this factor.
 selection_obst_cost_scale: 1.0        # It adjusts the influence of obstacle costs when evaluating different candidate trajectories.
 roadmap_graph_no_samples: 15          # Specifies the number of points sampled in the environment to create the roadmap graph. More samples increase the graph's density and the potential for finding different paths but also increase computation.
 roadmap_graph_area_width: 3           # Width of the area to sample for the roadmap graph.
 h_signature_prescaler: 0.5
 h_signature_threshold: 0.1
 obstacle_keypoint_offset: 0.1
 obstacle_heading_threshold: 0.45     # Determines how much of a change in heading (orientation) is considered significant.
 visualize_hc_graph: false            # Enable visualization of of the different homotopy classes

 # Recovery behaviours
 
 shrink_horizon_backup: true                # Recovery behavior where the planner temporarily reduces the horizon length to try and find a feasible trajectory. Solves: when the robot is unable to find a valid path due to complex obstacles or tight spaces
 shrink_horizon_min_duration: 10            # Ensures that the planner commits to the reduced horizon for a sufficient amount of time to potentially resolve issues, rather than constantly switching strategies.
 oscillation_recovery: true                 # Recovery behavior to handle oscillations (back-and-forth movements) in the robot's trajectory.
 oscillation_v_eps: 0.1                     # Threshold for detecting oscillations in linear velocity (m/s).
 oscillation_omega_eps: 0.05                 # Threshold for detecting oscillations in angular velocity (rad/s).
 oscillation_recovery_min_duration: 10      # The minimum duration (in seconds) to apply oscillation recovery behavior. Ensures that the oscillation recovery behavior is applied for a sufficient amount of time.
 oscillation_filter_duration: 1            # Defines the time window for detecting oscillatory behavior. This helps in smoothing out transient movements and focusing on consistent oscillations that require recovery.




  # Configure plugins (namespace move_base/costmap_to_lines or move_base/costmap_to_polygons)
  # costmap_converter/CostmapToLinesDBSRANSAC, costmap_converter/CostmapToLinesDBSMCCH, costmap_converter/CostmapToPolygonsDBSMCCH
 costmap_converter/CostmapToPolygonsDBSMCCH:             # Designed to convert costmap data (both from static and dynamic obstacles) into a polygonal representation. The plugin interprets areas of the costmap with high cost values (typically representing obstacles) and converts these areas into polygons
    cluster_max_distance: 0.4                              # Maximum distance between points in a cluster.
    cluster_min_pts: 2                                     # Minimum number of points required to form a cluster.
    ransac_inlier_distance: 0.15
    ransac_min_inliers: 10
    ransac_no_iterations: 1500
    ransac_remainig_outliers: 3
    ransac_convert_outlier_pts: true
    ransac_filter_remaining_outlier_pts: false
    convex_hull_min_pt_separation: 0.1