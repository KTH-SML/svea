# costmap used by local planner/controller to find a path.  
footprint: [[-0.15, 0.14], [0.35, 0.14], [0.35, -0.14], [-0.15, -0.14]]    # ismir shell considered.
global_frame: odom
robot_base_frame: base_link
update_frequency: 8.0   # Update the costmap.    4
publish_frequency: 8.0  # Publish the costmap.   4
#static_map: true        # It indicates that your local costmap will use a pre-built static map for navigation instead of relying solely on real-time sensor data. 
rolling_window: true    
width: 5
height: 3
resolution: 0.05




plugins:
  - {name: global_layer, type: "costmap_2d::StaticLayer"}  # For global map data  
 # - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}    # remove obstacle layer if using zonotope generator or dynamic obstacles inflator.
  - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
  

global_layer:
  map_topic: /map  
  subscribe_to_updates: false 

obstacle_layer:
  enabled: true
  observation_sources: point_cloud_sensor
  point_cloud_sensor:
    sensor_frame: base_link
    data_type: PointCloud2
    topic: /obstacle_pointcloud
    marking: true
    clearing: true
    obstacle_range: 5
    raytrace_range: 5         # not needed if I force costmap clearing. TODO : test it on the car. Result: it works sporadically.


inflation_layer:
  inflate_unknown: false             # Decides if unknown space should also be inflated.
  inscribed_radius: 0.00             # Defines the radius around the robot's footprint considered lethal.(robot cannot pass through it without collision)
  cost_scaling_factor: 10.0          # Controls how fast costs drop off with distance from obstacles to obstacles + inflation radius.
  inflation_radius: 0.25             # Sets the distance around obstacles within which costs are inflated. Its purpose is to let the planners compute trajectories as far away as possible from obstacles. Set it big for global planner to find a central trajectory.
 


# obstacle_layer:
#   observation_sources: laser_scan_sensor
#   laser_scan_sensor: 
#     sensor_frame: laser    # Frame of the laser sensor
#     data_type: LaserScan   # Type of sensor data
#     topic: /scan            # ROS topic publishing laser scan data
#     marking: true          # Whether to mark obstacles in the costmap
#     clearing: true         # Whether to clear obstacles in the costmap
#     min_angle: -1.57       # Minimum angle (radians) of the laser scan
#     max_angle: 1.57        # Maximum angle (radians) of the laser scan
#     min_range: 0.2         # Minimum range (meters) for obstacle detection.
#     obstacle_range: 3
#     raytrace_range: 3