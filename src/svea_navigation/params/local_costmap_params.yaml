# costmap used by local planner/controller to find a path.
#transform_tolerance: 0.3  
footprint: [[-0.15, 0.17], [0.5, 0.17], [0.5, -0.17], [-0.15, -0.17]]
global_frame: odom
robot_base_frame: base_link
update_frequency: 4.0   # Update the costmap
publish_frequency: 4.0  # Publish the costmap
#static_map: true        # It indicates that your local costmap will use a pre-built static map for navigation instead of relying solely on real-time sensor data. 
rolling_window: true    
width: 3.0
height: 3.0
resolution: 0.05


plugins:
  - {name: global_layer, type: "costmap_2d::StaticLayer"}  # For global map data  
  - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
  - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
  

global_layer:
  map_topic: /map  
  subscribe_to_updates: false 

obstacle_layer:
  observation_sources: laser_scan_sensor
  laser_scan_sensor: 
    sensor_frame: laser    # Frame of the laser sensor
    data_type: LaserScan   # Type of sensor data
    topic: /scan            # ROS topic publishing laser scan data
    marking: true          # Whether to mark obstacles in the costmap
    clearing: true         # Whether to clear obstacles in the costmap
    min_angle: -1.57       # Minimum angle (radians) of the laser scan
    max_angle: 1.57        # Maximum angle (radians) of the laser scan
    min_range: 0.2         # Minimum range (meters) for obstacle detection.
    obstacle_range: 3
    raytrace_range: 3


inflation_layer:
  inflate_unknown: false            # Decides if unknown space should also be inflated.
  inscribed_radius: 0.2             # Defines the radius around the robot's footprint considered lethal.(robot cannot pass through it without collision)
  cost_scaling_factor: 10.0          # Controls how fast costs drop off with distance from obstacles to obstacles + inflation radius.
  inflation_radius: 0.3             # Sets the distance around obstacles within which costs are inflated. Its purpose is to let the planners compute trajectories as far away as possible from obstacles. Set it big for global planner to find a central trajectory.
 