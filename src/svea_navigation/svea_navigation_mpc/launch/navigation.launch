<?xml version="1.0"?>
<launch>

    <!-- Launch file arguments -->
    <arg name="start_gps"       default="true"/>       <!-- if set to false to let the gps signal stabilize first, launch gps_launch.launch before this file. -->
    <arg name="gps_device"      default="/dev/ttyACM1"/>
    <arg name="gps_auth_alt"    default="false"/>       <!-- set to true to try alternative gps account login data-->
    <arg name="map"             default="/svea_ws/src/svea_navigation/maps/sml.yaml"/>   <!-- eg: sidewalk_DKv_30_east_to_west.yaml or itrl_sidewalk.yaml-->
    <arg name="use_foxglove"    default="true"/>
    <arg name="use_mocap"       default="true"/>
    <arg name="initial_pose_x"  default="0"/>
    <arg name="initial_pose_y"  default="0"/>
    <arg name="initial_pose_a"  default="0" />          <!-- wrt to map-->
    <arg name="is_sim"          default="true"/>  
    <arg name="record"          default="false"/>
    <arg name="rosbag_prefix"   default="/svea_ws/src/svea_navigation_mpc/bags/DKv_30"/>

    <!-- Svea vision / ZED Camera Args -->
    <arg name="frame_id"        default="map"/>             <!-- desired frame of the detected object's poses. -->
    <arg name="zed_base_frame"  default="base_link"/>
    <arg name="zed_cam_pos_x"   default="0.4"/>
    <arg name="zed_cam_pos_y"   default="0.0"/>
    <arg name="zed_cam_pos_z"   default="0.6"/>
    <arg name="zed_cam_roll"    default="0.0"/>
    <arg name="zed_cam_pitch"   default="0.0"/>
    <arg name="zed_cam_yaw"     default="0.0"/>
    <arg name="prompt_type"     default="bbox"/>
    <arg name="prompt_text"     default="a sidewalk or footpath or walkway or paved path"/>
    <arg name="owl_roi"         default="[0.25, 0.50, 0.75, 0.95]"/>
    <arg name="verbose"         default="true"/>

    <!-- Enable/Disable Args for svea vision -->
    <arg name="enable_svea_vision"           default="false"/>
    <arg name="enable_sidewalk_segmentation" default="false"/>
    <arg name="enable_bbox_image"            default="true"/>
    <arg name="enable_state_estimation"      default="false"/>

    <!-- Datum args, if use_datum is true, the datum will be set -->
    <arg name="use_datum"               default="true" />
    <arg name="datum_service"           default="/datum" />
    <arg name="datum_file"              default="$(arg map)" />
    <arg name="datum_data"              default="[]" />   

    <!-- Start map server -->
    <node if="$(eval map != '')" pkg="map_server" type="map_server" name="map_server" output="screen" args="$(arg map)"/>

    <!-- If is_sim equal to false, then start localization-->
    <group unless="$(arg is_sim)">

        <group if="$(arg use_mocap)">   <!-- If the localization is provided by Mocap, only start low level interface.-->
            <!-- Start low-level interface -->
            <node name="serial_node" pkg="rosserial_python" type="serial_node.py">
                <param name="port" value="/dev/ttyACM0"/>
                <param name="baud" value="250000"/>
            </node>
        </group>

        <group unless="$(arg use_mocap)">  <!-- If the localization is NOT provided by Mocap, use outdoor localization-->
            <group if="$(arg start_gps)">   <!-- If gps hasn't been launched apart, do it here.-->
                <!-- RTK -->
                <group unless="$(arg gps_auth_alt)">  <!-- Second gps login account.-->  
                    <include file="$(find svea_sensors)/launch/sensors_launch/rtk.launch">
                        <arg name="gps_device"    value="$(arg gps_device)"/>
                        <arg name="username"      value="708583036" />
                        <arg name="password"      value="151515" />
                    </include>
                </group>
                <group if="$(arg gps_auth_alt)">    <!-- Fist gps login account.--> 
                    <include file="$(find svea_sensors)/launch/sensors_launch/rtk.launch">
                        <arg name="gps_device"    value="$(arg gps_device)"/>
                        <arg name="username"      value="707886204" />
                        <arg name="password"      value="115544" />
                    </include>
                </group>
            </group>
            <!-- Start localization. it also starts low level interface and map server -->
            <include file="$(find svea_sensors)/launch/localize.launch">
                <arg name="is_indoors"              value="false"/>
                <arg name="start_serial"            value="true"/>
                <arg name="start_wheel_encoders"    value="false"/>
                <arg name="initial_pose_x"          value="$(arg initial_pose_x)" />
                <arg name="initial_pose_y"          value="$(arg initial_pose_y)" />
                <arg name="initial_pose_a"          value="$(arg initial_pose_a)" />
                <arg name="use_datum"               value="$(arg use_datum)"/>
                <arg name="datum_service"           value="$(arg datum_service)"/>
                <arg name="datum_file"              value="$(arg datum_file)"/>
                <arg name="datum_data"              value="$(arg datum_data)"/>
            </include>
        </group>
        <group if="$(arg enable_svea_vision)">
            <!-- Vision -->
            <include file="$(find svea_vision)/launch/zed_main.launch">
                <arg name="enable_sidewalk_segmentation"    value="$(arg enable_sidewalk_segmentation)"/>
                <arg name="enable_bbox_image"               value="$(arg enable_bbox_image)"/>
                <arg name="enable_state_estimation"         value="$(arg enable_state_estimation)"/>
                <arg name="sidewalk_prompt_type"            value="$(arg prompt_type)"/>
                <arg name="sidewalk_prompt_text"            value="$(arg prompt_text)"/>
                <arg name="sidewalk_owl_roi"                value="$(arg owl_roi)"/>
                <arg name="verbose"                         value="$(arg verbose)"/>
                <arg name="zed_base_frame"                  value="$(arg zed_base_frame)"/>
                <arg name="zed_cam_pos_x"                   value="$(arg zed_cam_pos_x)"/>
                <arg name="zed_cam_pos_y"                   value="$(arg zed_cam_pos_y)"/>
                <arg name="zed_cam_pos_z"                   value="$(arg zed_cam_pos_z)"/>
                <arg name="zed_cam_roll"                    value="$(arg zed_cam_roll)"/>
                <arg name="zed_cam_pitch"                   value="$(arg zed_cam_pitch)"/>
                <arg name="zed_cam_yaw"                     value="$(arg zed_cam_yaw)"/>
                <arg name="frame_id"                        value="$(arg frame_id)"/> 
            </include>
        </group>
    </group>

    <!-- Start Foxglove -->
    <include if="$(eval use_foxglove)" file="$(find foxglove_bridge)/launch/foxglove_bridge.launch">
        <arg name="port" value="8765" />
    </include>
    
    <!-- Start main node -->
    <node name="main" pkg="svea_navigation_mpc" type="main.py" output="screen">
        <param name="use_rviz" value="$(arg use_foxglove)"/>
        <param name="is_sim" value="$(arg is_sim)"/>
        <param name="mpc_freq" value="10"/> 
    </node>

    <!-- Start goal setter node for the mpc -->
    <node name="goal_setter_node" pkg="svea_navigation_mpc" type="mpc_goal_setter_node.py" output="screen"/>



    <!-- Start simulated poses generator if simulation. -->
    <!-- <group if="$(arg is_sim)">
        <node name="object_pose_node_simulator" pkg="svea_navigation_teb" type="object_pose_node_simulator.py" output="screen">
        </node>
    </group> -->

    <!--pointcloud_from_poses_node.py or dynamic_obstacles_inflator.py or zonotope_simulator.py -->
    <!-- <node name="zonotope_generator" pkg="svea_navigation_teb" type="zonotope_generator.py" output="screen">
        <param name="zonotope_width" value="1.0" />
        <param name="zonotope_height" value="0.3" />
        <param name="obstacles_topic" value="/objectposes" />
        <param name="obstacle_pub_topic" value="/move_base/TebLocalPlannerROS/obstacles" />
    </node> -->

    <!-- Conditional rosbag recording node -->
    <node if="$(arg record)" name="rosbag" pkg="rosbag" type="record" output="screen" args="-o $(arg rosbag_prefix)
        /map
        /map_metadata
        /move_base/NavfnROS/plan
        /3D_car
        /gps/filtered
        /gps/fix
        /initialpose
        /move_base/TebLocalPlannerROS/local_plan
        /move_base/TebLocalPlannerROS/obstacles
        /move_base/TebLocalPlannerROS/teb_markers
        /move_base/local_costmap/costmap
        /objectposes
        /objectmarkers
        /objects
        /obstacle_pointcloud
        /odometry/corrected
        /odometry/filtered
        /odometry/filtered/global
        /odometry/gps
        /tf
        /tf_static
        /cmd_vel
        /nav_steering_angle
        /nav_vehicle_velocity
        /bbox_image
        /lli/ctrl_actuated
    " />
    
</launch>
