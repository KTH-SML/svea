<?xml version="1.0"?>
<launch>

    <!-- Launch file arguments -->
    <arg name="gps_device"      default="/dev/ttyACM1"/>
    <arg name="gps_auth_alt"    default="false"/>  <!-- set to true to try alternative gps account login data-->
    <arg name="map"             default="maps/sidewalk_DKv_30_east_to_west.yaml"/>
    <arg name="use_foxglove"    default="true"/>
    <arg name="obstacle_map"    default="obstacles"/>
    <arg name="initial_pose_x"  default="0"/>
    <arg name="initial_pose_y"  default="0"/>
    <arg name="initial_pose_a"  default="0" /> <!-- wrt to map-->
    <arg name="is_sim"          default="true"/>
    <arg name="verbose"         default="false"/>    <!-- boolean to enable visualization tools for easier debugging -->

    <!-- Datum args, if use_datum is true, the datum will be set -->
    <arg name="use_datum"               default="true" />
    <arg name="datum_service"           default="/datum" />
    <arg name="datum_file"              default="$(find svea_navigation)/maps/$(arg map)" />
    <arg name="datum_data"              default="[]" />   
 
    <!-- Start map server -->
    <node if="$(eval map != '')" pkg="map_server" type="map_server" name="map_server" output="screen" args="$(find svea_navigation)/$(arg map)"/>
    <rosparam command="load" file="$(find svea_navigation)/$(arg obstacle_map).yaml" />

    <!-- If is_sim equal to false, then include all these tags-->
    <group unless="$(arg is_sim)">

        <!-- RTK -->
        <group unless="$(arg gps_auth_alt)">
            <include file="$(find svea_sensors)/launch/sensors_launch/rtk.launch">
                <arg name="gps_device"    value="$(arg gps_device)"/>
                <arg name="username"      value="708583036" />
                <arg name="password"      value="151515" />
            </include>
        </group>
        <group if="$(arg gps_auth_alt)">
            <include file="$(find svea_sensors)/launch/sensors_launch/rtk.launch">
                <arg name="gps_device"    value="$(arg gps_device)"/>
                <arg name="username"      value="707886204" />
                <arg name="password"      value="115544" />
            </include>
        </group>

        <!-- Start localization. it also starts low level interface and map server -->
        <include file="$(find svea_sensors)/launch/localize.launch">
            <arg name="is_indoors"              value="false"/>
            <arg name="start_serial"            value="true"/>
            <arg name="start_wheel_encoders"    value="false"/>
            <arg name="initial_pose_x"          value="$(arg initial_pose_x)" />
            <arg name="initial_pose_y"          value="$(arg initial_pose_y)" />
            <arg name="initial_pose_a"          value="$(arg initial_pose_a)" />
            <arg name="use_datum"               value="$(arg use_datum)"/>
            <arg name="datum_service"           value="$(arg datum_service)"/>
            <arg name="datum_file"              value="$(arg datum_file)"/>
            <arg name="datum_data"              value="$(arg datum_data)"/>
        </include>
    </group>

    <!-- Start Foxglove -->
    <include if="$(eval use_foxglove)" file="$(find foxglove_bridge)/launch/foxglove_bridge.launch">
        <arg name="port" value="8765" />
    </include>

    <!-- Start main node -->
    <node name="main" pkg="svea_navigation" type="main.py" output="screen">
        <param name="use_rviz" value="$(arg use_foxglove)"/>
        <param name="is_sim" value="$(arg is_sim)"/>
    </node>

    <!-- Start debugging tools, if enabled. -->
    <group if="$(arg verbose)">
        <node name="lidar_visualizer" pkg="svea_navigation" type="lidar_visualizer.py" output="screen">
            <param name="is_sim" value="$(arg is_sim)"/>
        </node>
    </group>

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find svea_navigation)/params/local_costmap_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find svea_navigation)/params/global_costmap_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find svea_navigation)/params/move_base_params.yaml" command="load" />
        <!-- Specify the global planner (default) -->
        <param name="base_global_planner" value="navfn/NavfnROS"/>
        <!-- Specify the local planner (default) -->
        <!-- <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/> -->
        <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
        <param if="$(arg is_sim)" name="TebLocalPlannerROS/odom_topic" value="odometry/corrected"/>
        <param unless="$(arg is_sim)" name="TebLocalPlannerROS/odom_topic" value="odometry/filtered/global"/>
        <param name="controller_frequency" value="4.0" />
        <param name="controller_patience" value="10.0" />
        <param name="clearing_rotation_allowed" value="false" /> <!-- Our carlike robot is not able to rotate in place -->

    </node>

</launch>
